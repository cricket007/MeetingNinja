var currentID; //index of the current meeting we're looking at
var deleteID; //what index of the table to delete from
var meetingsJSON = <%= raw @meetings %>; //need raw in here to deal with the quote parsing issue
meetingsJSON = JSON.parse("["+meetingsJSON.toString()+"]"); //this is manually setting up the format of the string so it parses correctly
var allUsers = <%= raw @allUsersRaw %>;
allUsers = JSON.parse(JSON.stringify(allUsers));

//This funciton is called when a user clicks on a row in the table and is passed in the index of the row that was clicked


function showViewMeetingModal(ID){
	var attendeeInfo;
	var attends = new Array();

	$('#viewMeetingModal').modal('hide');
	$('#viewMeetingModal').on('hidden.bs.modal', function() {
		$(this).removeData('bs.modal');
	});

	currentID = ID; //set the currentID to the ID we are currently looking at

	//Look up the meeting in our JSON object using the currentID and manually set each value to the appropriate element in the ViewMeetingModal
	document.getElementById("titleV").innerHTML = meetingsJSON[currentID]["title"];
	document.getElementById("locationV").innerHTML = meetingsJSON[currentID]["location"];

	var startDateTime = meetingsJSON[currentID]["datetime"];
	var endDateTime = meetingsJSON[currentID]["endDatetime"];

	var dtString = new Date(startDateTime * 1000);

	document.getElementById("datetimeV").innerHTML = dtString.toLocaleString();
	dtString = new Date(endDateTime * 1000);
	
	document.getElementById("endDatetimeV").innerHTML = dtString.toLocaleString();
	document.getElementById("descriptionV").innerHTML = meetingsJSON[currentID]["description"];
	//document.getElementById("attendanceV").innerHTML = meetingsJSON[currentID]["attendance"];

//alert("meetingsJSON:"+JSON.stringify(meetingsJSON[currentID]));
//for(attendee in meetingsJSON[currentID]["attendance"]){

	var allIDs = new Array();
	allIDs.push(<%=@userID%>);

	for(var i = 0; i < meetingsJSON[currentID]["attendance"].length; i++){
		allIDs.push(meetingsJSON[currentID]["attendance"][i]["userID"]);
	}

	for(var i = 0; i < allIDs.length; i++){
//alert("attendance:"+JSON.stringify(meetingsJSON[currentID]["attendance"]));
//alert("attendee:"+i);
	  $.ajax({
        type: 'GET',
        url: "http://csse371-04.csse.rose-hulman.edu/User/" + allIDs[i],
        success:function(data){
          attendeeInfo = JSON.parse(data);
          attends.push({'name':attendeeInfo['name']});
        },
        async: false
      	});
	}

	populateTableRows(attends, "name", "attendanceV");

	$('#viewMeetingModal').modal('show');
	$('#editMeetingModal').modal('hide');
}

function validateEditedValues(){
	var editTaskID = meetingsJSON[currentID]['meetingID'].toString();
	var invalidFields = false;

	for (key in meetingsJSON[currentID]){
		if(document.getElementById(key+"E") != null && document.getElementById(key+"ER") != null){
			if(document.getElementById(key+"E").value == ""){
				invalidFields = true;
				document.getElementById(key+"ER").style.display = "inline";
			}
			else{
				document.getElementById(key+"ER").style.display = "none";
			}
		}
	}
	var splitTime = document.getElementById("timeStartE").value.split(":");
	var splitDate = document.getElementById("dateStartE").value.split("-");
	var startDateTime = new Date(splitDate[0], splitDate[1]-1, splitDate[2], splitTime[0], splitTime[1]);
	startDateTime = startDateTime.getTime()/1000.0;

	// End date/time
	splitTime = document.getElementById("timeEndE").value.split(":");
	splitDate = document.getElementById("dateEndE").value.split("-");
	var endDateTime = new Date(splitDate[0], splitDate[1]-1, splitDate[2], splitTime[0], splitTime[1]);
	endDateTime = endDateTime.getTime()/1000.0;

	var dateNow = (new Date).getTime();

	additionalKeys = ["dateStart","dateEnd", "timeStart", "timeEnd"];
	for (key in additionalKeys){
		if(document.getElementById(additionalKeys[key]+"E") != null && document.getElementById(additionalKeys[key]+"ER") != null){
			if(document.getElementById(additionalKeys[key]+"E").value == ""){
				invalidFields = true;
				document.getElementById(additionalKeys[key]+"ER").style.display = "inline";
			}
			else{
				document.getElementById(additionalKeys[key]+"ER").style.display = "none";
			}
		}
	}

	if(!invalidFields && (!(startDateTime < endDateTime) ||!(startDateTime*1000 > dateNow) || !(endDateTime*1000 > dateNow))){
		alert("Invalid start and end date/time.");
		invalidFields = true;
	}


	if(document.getElementById("attendanceE") != null && document.getElementById("attendanceER") != null){
		if(!hasSelectedValue("attendanceE")){
			invalidFields = true;
			document.getElementById("attendanceER").style.display = "inline";
		}
		else{
			document.getElementById("attendanceER").style.display = "none";
		}
	}

	return invalidFields
}

//This function is called when a user submits an edit by clicking the "Save Changes" button. We cannot access our javascript variable, currentID, in the html file, index, when we set the functionality of the EditMeetingModal's "Save Changes" button so we use this as a proxy.
function showViewMeetingModalNoID(){
	var invalid = validateEditedValues();
	if (!invalid){
		updateEditedValues();
		showViewMeetingModal(currentID);
	}
}

//This function is called when a user clicks on the edit icon to directly bring up the EditMeetingModal that corresponds to the index of the row they clicked which is passed in as ID.
function showEditModal(ID){
	$('#editMeetingModal').modal('hide');
	$('#editMeetingModal').on('hidden.bs.modal', function() {
		$(this).removeData('bs.modal');
	});

	currentID = ID; //set the currentID to the ID we are currently looking at

	//Look up the meeting in our JSON object using the currentID and manually set each value to the appropriate element's value in the EditMeetingModal
	document.getElementById("titleE").value = meetingsJSON[currentID]["title"];
	document.getElementById("locationE").value = meetingsJSON[currentID]["location"];

	var dateTime = meetingsJSON[currentID]["datetime"];
	dateTime = (new Date(dateTime * 1000)).toLocaleString();
	dateTime = dateTime.split(" ");
	
	var date = dateTime[0].split("/");
	var month;
	var day;

	if(date[0].length == 1) month = "0" + date[0];
	else month = date[0];
	if(date[1].length == 1) day = "0" + date[1];
	else day = date[1];

	date = date[2] + "-" + month + "-" + day;

	var time = dateTime[1].split(":");
	var intHour;
	if(dateTime[2] == "PM"){
		intHour = parseInt(time[0]) + 12;
		time = intHour + ":" + time[1];
	}
	else{
		intHour = parseInt(time[0]);
		if(intHour < 10)
			time = "0" + intHour + ":" + time[1];
		else
			time = intHour + ":" + time[1];
	}

	document.getElementById("dateStartE").value = date;
	document.getElementById("timeStartE").value = time;
		
	dateTime = meetingsJSON[currentID]["endDatetime"];
	dateTime = (new Date(dateTime *1000)).toLocaleString();
	dateTime = dateTime.split(" ");

	date = dateTime[0].split("/");
	if(date[0].length == 1) month = "0" + date[0];
	else month = date[0];
	if(date[1].length == 1) day = "0" + date[1];
	else day = date[1];

	date = date[2] + "-" + month + "-" + day;

	time = dateTime[1].split(":");
	if(dateTime[2] == "PM"){
		intHour = parseInt(time[0]) + 12;
		time = intHour + ":" + time[1];
	}
	else{
		time = time[0] + ":" + time[1];
	}
	document.getElementById("dateEndE").value = date;
	document.getElementById("timeEndE").value = time;
	document.getElementById("descriptionE").value = meetingsJSON[currentID]["description"];
	//document.getElementById("attendanceE").value = meetingsJSON[currentID]["attendance"];

    populateSelect(allUsers['users'], "name", "userID", meetingsJSON[currentID]["attendance"], "attendanceE");

	$('#editMeetingModal').modal('show');
	$('#viewMeetingModal').modal('hide');
}

//This function is called when a user clicks on the "Edit" button inside of a ViewMeetingModal. We cannot access our javascript variable, currentID, in the html file, index, when we set the functionality of the ViewMeetingModal's "Edit" button so we use this as a proxy.
function showEditModalNoID(){
	showEditModal(currentID);
}

//This function is called when a user clicks the "Cancel" button inside of an EditMeetingModal. It simply brings the corresponding ViewMeetingModal back up.
function cancelEdit(){
	showViewMeetingModal(currentID);
}

//This function is called by the showViewMeetingModalNoID() function which is called when a user wants to submit an edit.
function updateEditedValues(){
	//convert the form into a JSON object for easy parsing
	var editForm = convertFormToJSON(document.getElementById("editMeetingForm"));

	// Start date/time
	var splitTime = editForm.timeStart.split(":");
	var splitDate = editForm.dateStart.split("-");
	var startDateTime = new Date(splitDate[0], splitDate[1]-1, splitDate[2], splitTime[0], splitTime[1]);
	startDateTime = startDateTime.getTime()/1000.0;
	editForm['datetime'] = startDateTime;

	// End date/time
	splitTime = editForm.timeEnd.split(":");
	splitDate = editForm.dateEnd.split("-");
	var endDateTime = new Date(splitDate[0], splitDate[1]-1, splitDate[2], splitTime[0], splitTime[1]);
	endDateTime = endDateTime.getTime()/1000.0;
	editForm['endDatetime'] = endDateTime;
	//get the meetingID associated with the current meeting from our table

	var editMeetingID = meetingsJSON[currentID]['meetingID'].toString();
	var editField = "";
	var editValue = "";
	var editData = "";
	
	//for each field in the edit form

	for (key in meetingsJSON[currentID]){
	//check to see if the value we just got from the edit form is the value we had before

		if(editForm[key] != null && meetingsJSON[currentID][key] != editForm[key]){
			//if not then change the value we had to the value we just got from the edit form
			meetingsJSON[currentID][key] = editForm[key];

			//set up the request data
			editField = key;
			editValue = meetingsJSON[currentID][key];
			editData = JSON.stringify({"meetingID":editMeetingID,"field":editField,"value":editValue});
			//make a PUT request with the backend to change the specified field for the specified meeting to the specified value
			$.ajax({
				type: 'PUT',
				url: 'http://csse371-04.csse.rose-hulman.edu/Meeting/',
				data: editData,
				async: false
			});

		}
	}
	
	editField = "attendance";

	if(document.getElementById("attendanceE").value != 0){
		editValue = returnSelectValuesAsJSON("attendance", "name", "userID", "attendanceE");
		editData = JSON.stringify({"meetingID":editMeetingID,"field":editField,"value":editValue});
	}
	else{
		editData = JSON.stringify({"meetingID":editMeetingID,"field":editField,"value":[]});
	}
	
	$.ajax({
		type: 'PUT',
		url: 'http://csse371-04.csse.rose-hulman.edu/Meeting/',
		data: editData,
		success:function(data){
			window.location.reload(true);
		}
	});
}

//This function is called when a user clicks the create button and sends a POST request to the backend
function submitCreateModal(){
	//grab the form from the html document
	var form = document.getElementById('createMeetingForm');
	//still testing validation
	if(validateMeetingForm(form)){
	//parse it into a json object
	var formJSON = new convertFormToJSON(form);

	//manually grab the values for each field expected by the backend
	var postId = <%=@userID%>;
	var postTitle = formJSON.title;
	var postLocation = formJSON.location;

	// Start date/time
	var splitTime = formJSON.timeStart.split(":");
	var splitDate = formJSON.dateStart.split("-");
	var startDateTime = new Date(splitDate[0], splitDate[1]-1, splitDate[2], splitTime[0], splitTime[1]);
	startDateTime = startDateTime.getTime()/1000.0;
	var postDatetime = startDateTime;

	// End date/time
	splitTime = formJSON.timeEnd.split(":");
	splitDate = formJSON.dateEnd.split("-");
	var endDateTime = new Date(splitDate[0], splitDate[1]-1, splitDate[2], splitTime[0], splitTime[1]);
	endDateTime = endDateTime.getTime()/1000.0;
	var postEndDatetime = endDateTime;
	//var mydate = new Date(testDate * 1000);
	//alert(mydate.toGMTString() + " " + mydate.toLocaleString());

	var postDescription = formJSON.description;
	var attendees = getMembers('attendees');
	var postAttendance = [];

	for (var i = attendees.length - 1; i >= 0; i--) {
		postAttendance.push({"userID":attendees[i]});
	};

		//set up the data for the call
		var postData = JSON.stringify({
			"userID":postId,
			"title":postTitle,
			"location":postLocation,
			"datetime":postDatetime,
			"endDatetime":postEndDatetime,
			"description":postDescription,
			"attendance":postAttendance
		});

		//make the POST request to the backend
		$.ajax({
			type: 'POST',
			url: 'http://csse371-04.csse.rose-hulman.edu/Meeting/',
			data: postData,
			success:function(data){
				//if successful then close the modal and reload the page
				$('#newMeetingModal').modal('hide');
				alert("Meeting successfully created! Reloading page...");
				window.location.reload(true);
			}
		});
}
}

//This function is called when a user clicks on the delete icon
function showDeleteModal(ID){
	deleteID = ID;
	$('#deleteMeetingModal').modal('show');
}

//This function is called when a user clicks the DeleteMeetingModal's "Delete" button.
function hideDeleteModal(){

	//get the id of the meeting associated with the index of the meeting from our table
	var deleteData = meetingsJSON[deleteID]['meetingID'];
	
	//make the DELETE request to the backend
	$.ajax({
		type: 'DELETE',
		url: 'http://csse371-04.csse.rose-hulman.edu/Meeting/' + deleteData,
		success:function(data){
			//if the database returned true
			if(JSON.parse(data)["valid"] == "true"){
				//hide the delete modal
				$('#deleteMeetingModal').modal('hide');
				//refresh the page
				window.location.reload(true);
			}
		}
	});
}



/*	=================
	Utility Functions
	=================
*/


//This function takes a form element and creates a json object using the name of each input in the form as the field and the value of each input as the corresponding input
function convertFormToJSON(form){
	var array = jQuery(form).serializeArray();
	var json = {};

	jQuery.each(array, function() {
		json[this.name] = this.value || '';
	});

	return json;
}

//This function is still being tested but will do simple validation of user input to make sure they do not leave any field blank and that they gave dates in the correct format. This can be expanded in the future with additional validations.
function validateMeetingForm(inputForm){

	var form = convertFormToJSON(inputForm);
	var filledOut = true;
	for(field in form){
		if(form[field] == null || form[field] === "") {
			document.getElementById(field+"R").style.display = "inline";
			filledOut = false;
		}
		if(field = "attendees"){
			if(!hasSelectedValue("attendees")){
				document.getElementById(field+"R").style.display ="inline";
				filledOut = false;
			}
			else document.getElementById(field+"R").style.displahy = "none";
		}
		else document.getElementById(field+"R").style.display = "none";
	}
	if(!filledOut) return false;
	// Start date/time
	var splitTime = form.timeStart.split(":");
	var splitDate = form.dateStart.split("-");
	var startDateTime = new Date(splitDate[0], splitDate[1]-1, splitDate[2], splitTime[0], splitTime[1]);
	startDateTime = startDateTime.getTime()/1000.0;

	// End date/time
	splitTime = form.timeEnd.split(":");
	splitDate = form.dateEnd.split("-");
	var endDateTime = new Date(splitDate[0], splitDate[1]-1, splitDate[2], splitTime[0], splitTime[1]);
	endDateTime = endDateTime.getTime()/1000.0;

	var dateNow = (new Date).getTime();
	
	
	if(filledOut && (!(startDateTime < endDateTime) ||!(startDateTime*1000 > dateNow) || !(endDateTime*1000 > dateNow))){
		alert("Invalid starting and ending date/time");
		return false;
	}
	//if(!isValidDate(form["dateEnd"] + " " + form["timeEnd"])){
	//	return false;
	//}
	return true;
}

//This function validates a date string of the format "mm/dd/yyyy HH:MM" using regex and general string tomfoolery
function isValidDate(dateString){
    // First check for the pattern
    if(!/^\d{2}\/\d{2}\/\d{4} \d{2}:\d{2}$/.test(dateString))
        return false;

    // Parse the date parts to integers
    var parts = dateString.split(/[\s\/:]+/);
    var month = parseInt(parts[0], 10);
    var day = parseInt(parts[1], 10);
    var year = parseInt(parts[2], 10);
	var hour = parseInt(parts[3], 10);
	var minute = parseInt(parts[4], 10);

	// Check the ranges of hour and minute
	if(hour > 23 || minute > 59)
		return false;

    // Check the ranges of month and year
    if(year < 1000 || year > 3000 || month == 0 || month > 12)
        return false;

    var monthLength = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];

    // Adjust for leap years
    if(year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))
        monthLength[1] = 29;

    // Check the range of the day
    return day > 0 && day <= monthLength[month - 1];

}

function getMembers(id){
    var newMembers = [];
    $( '#' + id + ' :selected' ).each( function( i, selected ) {
      newMembers[i] = $( selected ).val();
    });
    return newMembers;
}

function populateTableRows(JSONArray, JSONDisplayColumn, tableID){
    var table = document.getElementById(tableID);
    if(table.rows.length != 0){
      for(var i = table.rows.length - 1; i > -1; i--){
        table.deleteRow(i);
      }
    }

    for (var k in JSONArray){
      // alert(k);
      var rowCount = table.rows.length;
      var row = table.insertRow(rowCount);

      var cell = row.insertCell(0);

      cell.innerHTML = JSONArray[k][JSONDisplayColumn];
    }
}

function populateSelect(JSONArray, JSONDisplayColumn, JSONValueColumn, JSONSelectValues, selectID){
    var select = document.getElementById(selectID);

    if(select.options.length != 0){
      for(var i = select.options - 1; i > -1; i--){
        select.remove(i);
      }
    }

    for (var k in JSONArray){
    	if (JSONArray[k][JSONDisplayColumn] != ""){
		    var el = document.createElement("option");
		    el.textContent = JSONArray[k][JSONDisplayColumn];
		    el.value = JSONArray[k][JSONValueColumn];
		    select.appendChild(el);
		}
    }

    for (var i in JSONSelectValues){
      for (var j in select.options){
        if(JSONSelectValues[i][JSONValueColumn] == select.options[j].value){
          select.options[j].selected = true;
          break;
        }
      }
    }
}

function returnSelectValuesAsJSON(JSONtype, JSONDisplayColumn, JSONValueColumn, selectID){
    var select = document.getElementById(selectID);
    var newJSONString = "{" + "\"" + JSONtype + "\"" + ":[";
    
    for (var j in select.options){
      if(select.options[j].selected){
        newJSONString = newJSONString + "{" + "\"" + JSONValueColumn + "\":\"" + select.options[j].value + "\"},";
      }
    }

    // NOT SURE WHY THIS IS IN THERE. WHY +5?
    //if(newJSONString.length > (JSONtype + 5)){
    //	newJSONString = newJSONString.substring(0, newJSONString.length - 1);
	//}
	newJSONString = newJSONString.substring(0, newJSONString.length - 1);
    newJSONString = newJSONString + "]}";

    var newJSON = JSON.parse(newJSONString);
    return newJSON[JSONtype];
}

function hasSelectedValue(selectID){
	var select =document.getElementById(selectID);

	for (var j in select.options){
      if(select.options[j].selected){
        return true
      }
    }

    return false

}

function getStartDateTime(datetime){
	// Start date/time
	var value = (new Date(datetime * 1000)).toLocaleString();
	document.getElementById('id1').innerHTML = value;
}