var currentID;
var deleteID;
var tasksJSON = <%= raw @tasks %>;
tasksJSON = JSON.parse("["+tasksJSON.toString()+"]");
var allUsers = <%= raw @allUsersRaw %>;
allUsers = JSON.parse(JSON.stringify(allUsers));

function hideTaskModal(){
	$('#viewTaskModal').modal('hide');
}

function cancelEdit(){
	showViewTaskModal(currentID);
	$('#editTaskModal').modal('hide');
}

function showEditModal(){
	$('#editTaskModal').modal('hide');
	$('#editTaskModal').on('hidden.bs.modal', function() {
		$(this).removeData('bs.modal');
	});

	document.getElementById("titleE").value = tasksJSON[currentID]["title"];
	document.getElementById("isCompletedE").checked = tasksJSON[currentID]["isCompleted"];
	document.getElementById("descriptionE").value = tasksJSON[currentID]["description"];

	var date = epochToDate(tasksJSON[currentID]["deadline"]);
	var time = epochToTime(tasksJSON[currentID]["deadline"]);
	document.getElementById("deadlinedateE").value = date;
	document.getElementById("deadlinetimeE").value = time;

	document.getElementById("completionCriteriaE").value = tasksJSON[currentID]["completionCriteria"];
	
	//populateSelect(allUsers['users'], "name", "userID", tasksJSON[currentID]["assignedTo"], "grpMemSlct");

	$('#editTaskModal').modal('show');
	$('#viewTaskModal').modal('hide');
}

function validateEditedValues(){
	var editTaskID = tasksJSON[currentID]['taskID'].toString();
	var invalidFields = false;

	for (key in tasksJSON[currentID]){
		if(document.getElementById(key+"E") != null && key != "isCompleted" && document.getElementById(key+"ER") != null){
			if(document.getElementById(key+"E").value == ""){
				invalidFields = true;
				document.getElementById(key+"ER").style.display = "inline";
			}
			else{
				document.getElementById(key+"ER").style.display = "none";
			}
		}
	}

	var additionalkeys = ["deadlinetime","deadlinedate"]
	for (key in additionalkeys){
		if(document.getElementById(additionalkeys[key]+"E") != null && document.getElementById(additionalkeys[key]+"ER") != null){
			if(document.getElementById(additionalkeys[key]+"E").value == ""){
				invalidFields = true;
				document.getElementById(additionalkeys[key]+"ER").style.display = "inline";
			}
			else{
				document.getElementById(additionalkeys[key]+"ER").style.display = "none";
			}
		}
	}

	// Check dates
	var deadline = timeToEpoch(document.getElementById("deadlinedateE").value, document.getElementById("deadlinetimeE").value);
	var dateNow = (new Date).getTime();

	if(!(deadline*1000 > dateNow)){
		invalidFields = true;
		alert("Invalid deadline date/time");
	}

	return invalidFields
}

function updateEditedValues(){


	var editTaskID = tasksJSON[currentID]['taskID'].toString();
	var editField = "";
	var editValue = "";
	var editData = "";

	// Deadline date/time
	var datetime = timeToEpoch(document.getElementById("deadlinedateE").value, document.getElementById("deadlinetimeE").value);

	// Just the deadline...
	editData = JSON.stringify({"taskID":editTaskID,"field":"deadline","value":datetime});

	ajaxRequest(editData, 'PUT', '/Task/', false, 'null')

	// Everything else
	for (key in tasksJSON[currentID]){
		if(key != "deadline"){
			if(document.getElementById(key+"E") != null){
				if(key == "isCompleted" && document.getElementById(key+"E").checked != tasksJSON[currentID][key]){
					tasksJSON[currentID][key] = document.getElementById(key+"E").checked;
					editField = key;
					editValue = tasksJSON[currentID][key];
					editData = JSON.stringify({"taskID":editTaskID,"field":editField,"value":editValue});

					ajaxRequest(editData, 'PUT', '/Task/', false, 'null');
				}
				else if(tasksJSON[currentID][key] != document.getElementById(key+"E").value){
					tasksJSON[currentID][key] = document.getElementById(key+"E").value;

					editField = key;
					editValue = tasksJSON[currentID][key];
					editData = JSON.stringify({"taskID":editTaskID,"field":editField,"value":editValue});

					ajaxRequest(editData, 'PUT', '/Task/', false, 'null');

				}
			}
		}
	}

	window.location.reload(true);
}

function showDeleteModal(ID){
	deleteID = ID;
	$('#deleteTaskModal').modal('show');
}

function hideDeleteModal(){

	var deleteData = tasksJSON[deleteID]['taskID'];

	var onSuccess = function(data){
						if(JSON.parse(data)["valid"] == "true"){
						delete tasksJSON[deleteID];
						window.location.reload(true);
						}
					}

	ajaxRequest('null', 'DELETE', '/Task/' + deleteData, true, onSuccess)

	$('#deleteTaskModal').modal('hide');
}

function showViewTaskModalNoID(){
	var invalid = validateEditedValues();
	if (!invalid){
		updateEditedValues();
		showViewTaskModal(currentID);
	}
}

function showViewTaskModal(ID){
	$('#viewTaskModal').modal('hide');
	$('#viewTaskModal').on('hidden.bs.modal', function() {
		$(this).removeData('bs.modal');
	});

	currentID = ID;

	document.getElementById("titleV").innerHTML = tasksJSON[currentID]["title"];

	if(tasksJSON[currentID]["isCompleted"] == "on")
	{
	document.getElementById("isCompletedV").innerHTML = "True";
	}else{
		document.getElementById("isCompletedV").innerHTML = tasksJSON[currentID]["isCompleted"]
	}
	document.getElementById("descriptionV").innerHTML = tasksJSON[currentID]["description"];
	
	var dt = epochToFullString(tasksJSON[currentID]["deadline"]);
	document.getElementById("deadlineV").innerHTML = dt;
	dt = epochToFullString(tasksJSON[currentID]["dateCreated"]);
	document.getElementById("dateCreatedV").innerHTML = dt;

	document.getElementById("completionCriteriaV").innerHTML = tasksJSON[currentID]["completionCriteria"];

	var successAssignmentTo = function(data){
								assignedTo = JSON.parse(data);
							}
	ajaxRequest('null', 'GET', '/User/' + tasksJSON[currentID]["assignedTo"] , false, successAssignmentTo);

	var successAssignmentFrom = function(data){
								assignedFrom = JSON.parse(data);
							}
	ajaxRequest('null', 'GET', '/User/' + tasksJSON[currentID]["assignedFrom"] , false, successAssignmentFrom);

	var successCreation = function(data){
								createdBy = JSON.parse(data);
							}
	ajaxRequest('null', 'GET', '/User/' + tasksJSON[currentID]["createdBy"] , false, successCreation);

	document.getElementById("assignedToV").innerHTML = assignedTo["name"];
	document.getElementById("assignedFromV").innerHTML = assignedFrom["name"];
	document.getElementById("createdByV").innerHTML = createdBy["name"];

	$('#viewTaskModal').modal('show');
	$('#editTaskModal').modal('hide');
}

function submitCreateModal(){
	//grab the form from the html document
	var form = document.getElementById('createTask');
	//still testing validation

	//parse it into a json object
	var formJSON = new convertFormToJSON(form);
	var invalid = validateTaskForm(formJSON);
	if (!invalid){
		//manually grab the values for each field expected by the backend
		var userID = <%=@userID%>;
		var postTitle = formJSON.title;
		var postisCompleted = false;
		var postDescription = formJSON.description;

		var postDeadline = timeToEpoch(formJSON.deadlinedate, formJSON.deadlinetime);
		var postDateCreated = timeToEpoch(formJSON.dateCreated.split(" ")[0], formJSON.dateCreated.split(" ")[1]);
		var postDateAssigned = timeToEpoch(formJSON.dateAssigned.split(" ")[0], formJSON.dateAssigned.split(" ")[1]);

		var postCompletionCriteria = formJSON.completionCriteria;
		var postAssignedFrom = <%=@userID%>;
		var postCreatedBy = <%=@userID%>;
		var postAssignedTo = formJSON.assignedTo;//.options[formJSON.assignedTo.selectedIndex].value;

		var attendees = getMembers('assignedTo');
		var postAttendance = [];

		for (var i = attendees.length - 1; i >= 0; i--) {
		  postAttendance.push({"userID":attendees[i]});
		};

		//set up the data for the call
		var postData = JSON.stringify({
			"title":postTitle,
			"isCompleted":postisCompleted,
			"description":postDescription,
			"deadline":postDeadline,
			"dateCreated":postDateCreated,
			"dateAssigned":postDateAssigned,
			"completionCriteria":postCompletionCriteria,
			"assignedTo":postAssignedTo,
			"assignedFrom":postAssignedFrom,
			"createdBy":postCreatedBy
		});
		var success = function(data){
						$('#newTaskModal').modal('hide');
						alert("Task successfully created! Reloading page...")
						window.location.reload(true);
					}
		ajaxRequest(postData, 'POST', '/Task/', true, success);

	}
}

function validateTaskForm(JSONForm){
	var invalidFields = false;

	for (key in JSONForm){
		if(document.getElementById(key+"R") != null){
			if(JSONForm[key] == ""){
				invalidFields = true;
				document.getElementById(key+"R").style.display = "inline";
			}
			else{
				document.getElementById(key+"R").style.display = "none";
			}
		}
	}

	var additionalkeys = ["deadlinetime","deadlinedate"];
	for (key in additionalkeys){
		if(document.getElementById(additionalkeys[key]) != null && document.getElementById(additionalkeys[key]+"R") != null){
			if(document.getElementById(additionalkeys[key]).value == ""){
				invalidFields = true;
				document.getElementById(additionalkeys[key]+"R").style.display = "inline";
			}
			else{
				document.getElementById(additionalkeys[key]+"R").style.display = "none";
			}
		}
	}

	//Check dates
	var deadline = timeToEpoch(document.getElementById("deadlinedate").value, document.getElementById("deadlinetime").value);
	var dateNow = (new Date).getTime();

	if(!(deadline*1000 > dateNow) && !invalidFields){
		invalidFields = true;
		alert("Invalid deadline date/time");
	}

	return invalidFields;
}
