<%= stylesheet_link_tag "/codebase/dhtmlxscheduler.css" %>
<%= javascript_include_tag "/codebase/dhtmlxscheduler.js" %>
<%= javascript_include_tag "/codebase/ext/dhtmlxscheduler_collision.js" %>
<script src="http://code.jquery.com/jquery-latest.min.js"
        type="text/javascript"></script>
<script src='/codebase/ext/dhtmlxscheduler_agenda_view.js'></script>
<script src="/codebase/ext/dhtmlxscheduler_editors.js" type="text/javascript" charset="utf-8"></script>
<script src="../codebase/ext/dhtmlxscheduler_multiselect.js"></script>
<script src="../../codebase/ext/dhtmlxscheduler_readonly.js" type="text/javascript" charset="utf-8"></script>
<style>
.activeCreateButton{
	background:#99FF66;
}
</style>


<script type="text/javascript" charset="utf-8">

	function convertToDBDate(scheduleDate){
		var dbMonth = scheduleDate.substr(4,3);
		var dbDay = scheduleDate.substr(8,2);
		var dbYear = scheduleDate.substr(11,4);
		var dbTime = scheduleDate.substr(16,5);

		var dbMonthNumber;
		switch(dbMonth)
			{
			case 'Jan':
			  dbMonthNumber = '01';
			  break;
			case 'Feb':
			  dbMonthNumber = '02';
			  break;
			case 'Mar':
			  dbMonthNumber = '03';
			  break;
			case 'Apr':
			  dbMonthNumber = '04';
			  break;
			case 'May':
			  dbMonthNumber = '05';
			  break;
			case 'Jun':
			  dbMonthNumber = '06';
			  break;
			case 'Jul':
			  dbMonthNumber = '07';
			  break;
			case 'Aug':
			  dbMonthNumber = '08';
			  break;
			case 'Sep':
			  dbMonthNumber = '09';
			  break;
			case 'Oct':
			  dbMonthNumber = '10';
			  break;
			case 'Nov':
			  dbMonthNumber = '11';
			  break;
			case 'Dec':
			  dbMonthNumber = '12';
			  break;
			default:
			  alert("Error: Scheduler dateMonth parsed incorrectly");
			}


		var dbDate = dbMonthNumber+"/"+dbDay+"/"+dbYear+" "+dbTime;

		return dbDate;
	}


var allUsers = <%= raw @allUsersRaw %>;
allUsers = JSON.parse(JSON.stringify(allUsers));

var members = [];

for (index = 0; index < Object.keys(allUsers.users).length; ++index){
	if(allUsers['users'][index]['name'] != null){
		var specificUser = JSON.parse(JSON.stringify({
			 "key":parseInt(allUsers['users'][index]['userID']),
			 "label": allUsers['users'][index]['name']
			}));

		members.push(specificUser);
	}
}

var eventType = "meeting";

var configs = {
   task: [
			{name:"title", height:30, type:"textarea", map_to:"text", focus:true},
			{name:"isCompleted", height:50, type:"checkbox", map_to:"isCompleted", checked_value:true, unchecked_value:false},
			{name:"description", height:50, type:"textarea", map_to:"description"},
			{name:"completionCriteria", height:50, type:"textarea", map_to:"completionCriteria"},
			{name:"assignedTo", height:50, type:"select", map_to:"assignedTo", options:members},
			{name:"assignedFrom", height:50, type:"select", map_to:"assignedFrom", options:members},
			{name:"time", height:50, type:"time", map_to:"auto"}
   ],
   meeting: [
			{name:"title", height:30, type:"textarea", map_to:"text", focus:true},
			{name:"description", height:50, type:"textarea", map_to:"description",},
			{name:"location", height:50, type:"textarea", map_to:"location"},
			{name:"attendance", height:50, type:"multiselect", map_to:"attendance", options:members},
			{name:"time", height:50, type:"time", map_to:"auto"}
      ]
};

//function to switch lightbox configuration and redraw the form
function switchLightbox(type){
	eventType = type; 
   if(configs[type]){
      var box_visible = scheduler.getState().lightbox_id;
      if(box_visible){
         scheduler.hide_lightbox();
      }

      scheduler.config.lightbox.sections = configs[type];

      scheduler.resetLightbox();
      if(box_visible){
         scheduler.showLightbox(box_visible);
      }
   }
}

	function getSchedule() {
		var userId = <%= @userID %>;

		  $.get('http://csse371-04.csse.rose-hulman.edu/User/Schedule/'+userId,function(data){
		
			var schedule = JSON.parse(data);
//alert("schedule:"+JSON.stringify(schedule));

			var events = new Array();

			for(var value in schedule.schedule){

				var start_date = schedule.schedule[value].datetimeStart;
//alert("start_date: "+start_date);
var mydate = new Date(start_date*1000);
var myminutes = mydate.getMinutes();
if(mydate.getMinutes().toString().length == 1){
	myminutes = "0"+myminutes;
}
var mydatestring = 
    (mydate.getMonth() + 1) + "/" +
    mydate.getDate() + "/" +
    mydate.getFullYear() + " " +
    mydate.getHours() + ":" +
    myminutes;

start_date = mydatestring;


	//				alert("mydate: "+mydatestring);
				var end_date = schedule.schedule[value].datetimeEnd;

//alert("start_date: "+start_date);
var mydateend = new Date(end_date*1000);
var myminutesend = mydateend.getMinutes();
if(mydateend.getMinutes().toString().length == 1){
	myminutesend = "0"+myminutesend;
}
var mydatestringend = 
    (mydateend.getMonth() + 1) + "/" +
    mydateend.getDate() + "/" +
    mydateend.getFullYear() + " " +
    mydateend.getHours() + ":" +
    myminutesend;

end_date = mydatestringend;


				var text = schedule.schedule[value].title;
				var color = (schedule.schedule[value].type == "meeting") ? 'blue' : 'orange';
				var type = schedule.schedule[value].type;
				var isNew = false;

				events[value] = "{start_date:\'"+start_date+"\',end_date:\'"+end_date+"\',text:\'"+text+"\',color:\'"+color+"\',type:\'"+type+"\',isNew:\'"+isNew+"\'}";
			}


			events = "["+events+"]";

			//alert("Events:" + events);


//scheduler.config.xml_date="%Y-%m-%d %H:%i";


	
	//working on custom lightbox
	scheduler.locale.labels.section_attendance = "Attendees";
	scheduler.locale.labels.section_assignedFrom = "Assigned From";
	scheduler.locale.labels.section_assignedTo = "Assigned To";
	scheduler.locale.labels.section_completionCriteria = "Completion Criteria";
	scheduler.locale.labels.section_description = "Description";
	scheduler.locale.labels.section_isCompleted = "Is this Completed?";
	scheduler.locale.labels.section_title = "Title";
	scheduler.locale.labels.section_location = "Location";
	scheduler.locale.labels["meetingButton"] = "Create Meetings";
	scheduler.locale.labels["taskButton"] = "Create Tasks";

	//scheduler.config.readonly = true;
	//scheduler.config.buttons_right = ["dhx_delete_btn","taskButton","meetingButton"];
	scheduler.config.buttons_right = ["taskButton","meetingButton"];

	scheduler.config.lightbox.sections = configs["meeting"];

	scheduler.config.collision_limit = 3;
	scheduler.config.drag_move = false;
	scheduler.config.details_on_dblclick = true;
	//scheduler.config.readonly_form = true;
	


    scheduler.attachEvent("onLightboxButton", function(button_id, node, e){
        if(button_id == "meetingButton"){
            switchLightbox("meeting");
			//$("div.meetingButton_set").toggleClass('activeCreateButton');
			
        }else if(button_id == "taskButton"){
            switchLightbox("task");
			$("div.taskButton_set").toggleClass('activeCreateButton');
			$("div.meetingButton_set").toggleClass('activeCreateButton');
		}
    });

	
	scheduler.attachEvent("onClick", function(id,e){
		var ev = scheduler.getEvent(id);
		//alert("ev:"+JSON.stringify(ev));
		if(ev.isNew != null){
			return false;		
		}
		scheduler.showLightbox(id);
		
	});

scheduler.attachEvent("onLightbox", function (id){
			$("div.meetingButton_set").toggleClass('activeCreateButton');
});



	scheduler.attachEvent("onDblClick", function(id,e){
		var ev = scheduler.getEvent(id);
		//alert("ev:"+JSON.stringify(ev));
		if(ev.isNew != null){
			return false;
			//scheduler.config.readonly_form=true;
			//scheduler.showLightbox(id);		
		}
		scheduler.showLightbox(id);
		
	});

//	scheduler.attachEvent("onBeforeDrag", function(id,e){
//		return false;
//	});
//	scheduler.attachEvent("onBeforeLightbox", function(id,e){
//		$("div.meetingButton_set").toggleClass('activeCreateButton');
//		scheduler.showLightbox(id);
//	});
	

	scheduler.attachEvent("onEventSave",function(id,data){
//alert("data:"+JSON.stringify(data));
		if(eventType == "meeting"){
			var postUserID = <%= @userID %>;
			var postTitle = data.text;
			var postLocation = data.location;
			var postDatetime = convertToDBDate(data.start_date.toString());
			var postEndDatetime = convertToDBDate(data.end_date.toString());
			var postDescription = data.description;
			var postAttendance = data.attendance;

			var postData = JSON.stringify({
				"userID":postUserID,
				"title":postTitle,
				"location":postLocation,
				"datetime":postDatetime,
				"endDatetime":postEndDatetime,
				"description":postDescription,
				"attendance":postAttendance
			});
//alert("postData:"+postData);

			$.ajax({
				type: "POST",
				url: "http://csse371-04.csse.rose-hulman.edu/Meeting/",
				data: postData,
				success:function(data){
					//alert("Success:");		
				}
			});

		}else if(eventType == "task"){
			var d = new Date();
			var dFormatted =    ("00" + (d.getMonth() + 1)).slice(-2) + "/" + 
    ("00" + d.getDate()).slice(-2) + "/" + 
    d.getFullYear() + " " + 
    ("00" + d.getHours()).slice(-2) + ":" + 
    ("00" + d.getMinutes()).slice(-2);

			var postTitle = data.text;
			var postIsCompleted = data.isCompleted;
			var postDescription = data.description;
			var postDeadline = convertToDBDate(data.end_date.toString());
			var postDateCreated = dFormatted;
			var postDateAssigned = convertToDBDate(data.start_date.toString());
			var postCompletionCriteria = data.completionCriteria;
			var postAssignedTo = data.assignedTo;
			var postAssignedFrom = data.assignedFrom;
			var postCreatedBy = <%= @userID %>;

			var postData = JSON.stringify({
				"title":postTitle,
				"isCompleted":postIsCompleted,
				"description":postDescription,
				"deadline":postDeadline,
				"dateCreated":postDateCreated,
				"dateAssigned":postDateAssigned,
				"completionCriteria":postCompletionCriteria,
				"assignedTo":postAssignedTo,
				"assignedFrom":postAssignedFrom,
				"createdBy":postCreatedBy
			});

alert("postData:"+postData);
			$.ajax({
				type: "POST",
				url: "http://csse371-04.csse.rose-hulman.edu/Task/",
				data: postData,
				success:function(data){
					//alert("Success:");		
				}
			});

		}else{
			alert("Error: EventType not specified");
		}

		return true;
	});// end attachEvent

			scheduler.init('scheduler_here',new Date(),"agenda");
			scheduler.parse(events, "json");
		  
			});//end ajax GET
			}//end getScheduler


</script>

<div id="scheduler_here" class="dhx_cal_container" 
style='width:800px; height:800px; padding:10px;'>
		<div class="dhx_cal_navline">
			<div class="dhx_cal_prev_button">&nbsp;</div>
			<div class="dhx_cal_next_button">&nbsp;</div>
			<div class="dhx_cal_today_button"></div>
			<div class="dhx_cal_date"></div>
			<div class="dhx_cal_tab" name="day_tab" style="right:204px;"></div>
			<div class="dhx_cal_tab" name="week_tab" style="right:140px;"></div>
			<div class="dhx_cal_tab" name="month_tab" style="right:76px;"></div>
			<div class="dhx_cal_tab" name='agenda_tab' style="right:248px"></div>
		</div>
		<div class="dhx_cal_header">
		</div>
		<div class="dhx_cal_data">
		</div>
</div>

<script type="text/javascript">
getSchedule();
</script>
