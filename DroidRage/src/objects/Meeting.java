package objects;

import java.util.ArrayList;
import java.util.List;

import objects.parcelable.UserParcel;
import android.database.Cursor;
import android.os.Parcel;
import android.os.Parcelable;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.meetingninja.csse.database.AsyncResponse;
import com.meetingninja.csse.database.Keys;
import com.meetingninja.csse.database.volley.UserVolleyAdapter;
import com.meetingninja.csse.extras.NinjaTextUtils;

@JsonInclude(JsonInclude.Include.NON_NULL)
// Generated by http://www.jsonschema2pojo.org/
@JsonPropertyOrder({ "meetingID", "title", "location", "datetime",
		"endDatetime", "description", "attendance" })
public class Meeting extends Event {
	private String meetingID;
	private String agendaID;
	protected String location;

	private List<User> attendance = new ArrayList<User>();

	public Meeting() {
		// Required empty constructor
		setStartTime(0L);
		setEndTime(1L);
	}

	public Meeting(Meeting copyMeeting) {
		setID(copyMeeting.getID());
		setTitle(copyMeeting.getTitle());
		setLocation(copyMeeting.getLocation());
		setStartTime(copyMeeting.getStartTime());
		setEndTime(copyMeeting.getEndTime());
		setDescription(copyMeeting.getDescription());
		setAttendance(copyMeeting.getAttendance());
	}
	
	public Meeting(Cursor crsr) {
		// get columns
		int idxID = crsr.getColumnIndex(Keys._ID);
		int idxTITLE = crsr.getColumnIndex(Keys.Meeting.TITLE);
		int idxLOCATION = crsr.getColumnIndex(Keys.Meeting.LOCATION);
		int idxSTART_TIME = crsr.getColumnIndex(Keys.Meeting.START);
		int idxEND_TIME = crsr.getColumnIndex(Keys.Meeting.END);
		int idxDESCRIPTION = crsr.getColumnIndex(Keys.Meeting.DESC);
		// set fields
		this.meetingID = "" + crsr.getInt(idxID);
		this.title = crsr.getString(idxTITLE);
		this.location = crsr.getString(idxLOCATION);
		setStartTime(crsr.getLong(idxSTART_TIME));
		setEndTime(crsr.getLong(idxEND_TIME));
		this.description = crsr.getString(idxDESCRIPTION);
	}


	@Override
	public String getID() {
		return this.meetingID;
	}

	@Override
	public void setID(int id) {
		this.meetingID = Integer.toString(id);

	}

	public boolean hasAgenda() {
		return !NinjaTextUtils.isEmpty(agendaID);
	}
	
	public void setAgendaID(String agId) {
		this.agendaID = agId;
	}
	
	public int getAgendaID() {
		return Integer.parseInt(agendaID);
	}

	public List<User> getAttendance() {
		return this.attendance;
	}

	public String getLocation() {
		return (!NinjaTextUtils.isEmpty(location)) ? location : "";
	}

	public void setLocation(String location) {
		this.location = location;
	}

	public void setAttendance(List<User> attendance) {
		this.attendance = attendance;
	}

	public void addAttendeeWithID(User user) {
		UserVolleyAdapter.fetchUserInfo(user.getID(),
				new AsyncResponse<User>() {

					@Override
					public void processFinish(User result) {
						addAttendee(result);
					}
				});
	}

	public void addAttendee(User user) {

		this.attendance.add(user);

	}

	@Override
	public int compareTo(Event another) {
		 //reversed
		return -1 * super.compareTo(another);
	}
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder();
		builder.append("Meeting [meetingID=");
		builder.append(meetingID);
		builder.append(", title=");
		builder.append(title);
		builder.append(", location=");
		builder.append(location);
		builder.append(", description=");
		builder.append(description);
		builder.append(", attendance=");
		builder.append(attendance);
		builder.append("]");
		return builder.toString();
	}

}
