package objects;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

@JsonInclude(JsonInclude.Include.NON_NULL)
// Generated by http://www.jsonschema2pojo.org/
@JsonPropertyOrder({ "projectID", "projectTitle", "meetings", "notes",
		"members" })
public class Project implements Comparable<Project>{

	@JsonProperty("projectID")
	private String projectID;
	@JsonProperty("projectTitle")
	private String projectTitle;
	@JsonProperty("meetings")
	private List<Meeting> meetings = new ArrayList<Meeting>();
	@JsonProperty("notes")
	private List<Note> notes = new ArrayList<Note>();
	@JsonProperty("members")
	private List<User> members = new ArrayList<User>();

	@JsonProperty("projectID")
	public String getProjectID() {
		return projectID;
	}

	@JsonProperty("projectID")
	public void setProjectID(String projectID) {
		this.projectID = projectID;
	}

	@JsonProperty("projectTitle")
	public String getProjectTitle() {
		return projectTitle;
	}

	@JsonProperty("projectTitle")
	public void setProjectTitle(String projectTitle) {
		this.projectTitle = projectTitle;
	}

	@JsonProperty("meetings")
	public List<Meeting> getMeetings() {
		return meetings;
	}

	@JsonProperty("meetings")
	public void setMeetings(List<Meeting> meetings) {
		this.meetings = meetings;
	}

	@JsonProperty("notes")
	public List<Note> getNotes() {
		return notes;
	}

	@JsonProperty("notes")
	public void setNotes(List<Note> notes) {
		this.notes = notes;
	}

	@JsonProperty("members")
	public List<User> getMembers() {
		return members;
	}

	@JsonProperty("members")
	public void setMembers(List<User> members) {
		this.members = members;
	}
	
	public void addMember(User user){
		this.members.add(user);
	}
	
	public void addMeeting(Meeting meeting){
		this.meetings.add(meeting);
	}
	
	public void addNote(Note note){
		this.notes.add(note);
	}
	public int compareTo(Project another) {
		if (another == null) {
			return 1;
		}
		if (another instanceof Project) {
			return compareTo((Project) another);
		}
		return this.getProjectTitle().compareTo(another.getProjectTitle());
	}

}
