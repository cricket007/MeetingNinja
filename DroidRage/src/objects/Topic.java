package objects;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

@JsonInclude(JsonInclude.Include.NON_NULL)
// Generated by : http://www.jsonschema2pojo.org/
@JsonPropertyOrder({ "topic", "time", "subtopic" })
public class Topic implements Serializable {
	/**
	 * Generated Serial ID
	 */
	private static final long serialVersionUID = -1436693323370236714L;
	@JsonProperty("topic")
	private String topic;
	@JsonProperty("time")
	private String time;
	@JsonProperty("subtopic")
	private ArrayList<Topic> subTopics = new ArrayList<Topic>();

	public Topic() {
		// Required empty constructor
	}

	public Topic(String title) {
		this.topic = title;
	}

	@JsonProperty("topic")
	public String getTitle() {
		return (topic != null && !topic.isEmpty()) ? topic : "";
	}

	@JsonProperty("topic")
	public void setTitle(String title) {
		topic = title;
	}

	@JsonProperty("subtopic")
	public ArrayList<Topic> getTopics() {
		// TODO Auto-generated method stub
		return subTopics;
	}

	@JsonProperty("subtopic")
	public void setTopics(ArrayList<Topic> topics) {
		// TODO Auto-generated method stub
		subTopics = topics;
	}

	@JsonProperty("time")
	public void setTime(String length) {
		int testInt = Integer.valueOf(length);
		setTime(testInt);
	}

	@JsonIgnore
	private void setTime(int time) {
		this.time = Integer.toString(time);
	}

	@JsonProperty("time")
	public String getTime() {
		if (this.subTopics.size() > 0)
			return Long.toString(getTotalSubtopicTime(this));
		else
			return (time != null && !time.isEmpty()) ? time : "0";
	}

	@JsonIgnore
	private long getTotalSubtopicTime(Topic t) {
		int total = 0;
		final ArrayList<Topic> topicList = t.getTopics();

		for (Topic sub_t : topicList) {
			total += getTotalSubtopicTime(sub_t);
		}
		return total;
	}

	@JsonIgnore
	public void addTopic(Topic subTopic) {
		this.subTopics.add(subTopic);
	}

	@JsonIgnore
	public void addTopic(int index, Topic subTopic) {
		this.subTopics.add(index, subTopic);
	}
}
